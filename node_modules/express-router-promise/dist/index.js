'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.configureRouterFactory = undefined;

var _express = require('express');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var configureRouterFactory = exports.configureRouterFactory = function configureRouterFactory(options) {
    Object.keys(options).forEach(function (option) {
        return globalOptions[option] = options[option];
    });
};

var globalOptions = {
    expressRouterOptions: {},
    responseHandler: function responseHandler(result, res) {
        return res.json(result || {});
    },
    responseLogger: function responseLogger() {},
    requestLogger: function requestLogger() {}
};

exports.default = function (options) {
    var _ref = options || {},
        _ref$expressRouterOpt = _ref.expressRouterOptions,
        expressRouterOptions = _ref$expressRouterOpt === undefined ? globalOptions.expressRouterOptions : _ref$expressRouterOpt,
        _ref$responseHandler = _ref.responseHandler,
        responseHandler = _ref$responseHandler === undefined ? globalOptions.responseHandler : _ref$responseHandler,
        _ref$responseLogger = _ref.responseLogger,
        responseLogger = _ref$responseLogger === undefined ? globalOptions.responseLogger : _ref$responseLogger,
        _ref$requestLogger = _ref.requestLogger,
        requestLogger = _ref$requestLogger === undefined ? globalOptions.requestLogger : _ref$requestLogger;

    var router = (0, _express.Router)(expressRouterOptions);

    var useRoute = function useRoute(method, path) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
        }

        var middlewarePromises = args.slice(0, -1);
        var lastPromise = args.slice(-1)[0];

        var middleware = transformMiddleware(middlewarePromises);

        var resolutionCallback = function resolutionCallback(req, res, next) {
            requestLogger(req);
            lastPromise(req).then(function (result) {
                responseLogger(req, result);
                responseHandler(result, res);
            }).catch(function (err) {
                return next(err);
            });
        };

        var routerArgs = [path].concat(_toConsumableArray(middleware), [resolutionCallback]);

        router[method].apply(router, _toConsumableArray(routerArgs));
    };

    var use = function use() {
        for (var _len2 = arguments.length, middlewarePromises = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            middlewarePromises[_key2] = arguments[_key2];
        }

        var middleware = transformMiddleware(middlewarePromises);
        router.use.apply(router, _toConsumableArray(middleware));
    };

    return {
        get: function get(path) {
            for (var _len3 = arguments.length, restArgs = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                restArgs[_key3 - 1] = arguments[_key3];
            }

            return useRoute.apply(undefined, ['get', path].concat(restArgs));
        },
        post: function post(path) {
            for (var _len4 = arguments.length, restArgs = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                restArgs[_key4 - 1] = arguments[_key4];
            }

            return useRoute.apply(undefined, ['post', path].concat(restArgs));
        },
        put: function put(path) {
            for (var _len5 = arguments.length, restArgs = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
                restArgs[_key5 - 1] = arguments[_key5];
            }

            return useRoute.apply(undefined, ['put', path].concat(restArgs));
        },
        delete: function _delete(path) {
            for (var _len6 = arguments.length, restArgs = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                restArgs[_key6 - 1] = arguments[_key6];
            }

            return useRoute.apply(undefined, ['delete', path].concat(restArgs));
        },
        patch: function patch(path) {
            for (var _len7 = arguments.length, restArgs = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
                restArgs[_key7 - 1] = arguments[_key7];
            }

            return useRoute.apply(undefined, ['patch', path].concat(restArgs));
        },
        use: use,
        expressRouter: router
    };
};

var transformMiddleware = function transformMiddleware(middlewarePromises) {

    return middlewarePromises.map(function (middlewarePromise) {
        return function (req, res, next) {
            middlewarePromise(req, res).then(function () {
                return next();
            }).catch(function (err) {
                return next(err);
            });
        };
    });
};